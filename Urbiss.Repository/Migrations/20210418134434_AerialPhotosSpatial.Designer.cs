// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Urbiss.Repository;

namespace Urbiss.Repository.Migrations
{
    [DbContext(typeof(UrbissDbContext))]
    [Migration("20210418134434_AerialPhotosSpatial")]
    partial class AerialPhotosSpatial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("postgis")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_roleclaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_roleclaims_roleid");

                    b.ToTable("roleclaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userclaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userclaims_userid");

                    b.ToTable("userclaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("providerdisplayname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_userlogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userlogins_userid");

                    b.ToTable("userlogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_usertokens");

                    b.ToTable("usertokens");
                });

            modelBuilder.Entity("Urbiss.Domain.Models.AerialPhoto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Creation")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<Polygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(point)")
                        .HasColumnName("geometry");

                    b.Property<DateTime?>("Modification")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint")
                        .HasColumnName("surveyid");

                    b.Property<string>("UserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("usercreation");

                    b.Property<string>("UserModification")
                        .HasColumnType("text")
                        .HasColumnName("usermodification");

                    b.HasKey("Id")
                        .HasName("pk_aerialphotos");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("ix_aerialphotos_surveyid");

                    b.ToTable("aerialphotos");
                });

            modelBuilder.Entity("Urbiss.Domain.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Creation")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation");

                    b.Property<MultiPolygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(multipolygon)")
                        .HasColumnName("geometry");

                    b.Property<string>("IbgeCode")
                        .IsRequired()
                        .HasColumnType("character varying(7)")
                        .HasColumnName("ibgecode");

                    b.Property<double>("LatitudeCenter")
                        .HasColumnType("double precision")
                        .HasColumnName("latitudecenter");

                    b.Property<double>("LongitudeCenter")
                        .HasColumnType("double precision")
                        .HasColumnName("longitudecenter");

                    b.Property<DateTime?>("Modification")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Srid")
                        .HasColumnType("integer")
                        .HasColumnName("srid");

                    b.Property<string>("UserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("usercreation");

                    b.Property<string>("UserModification")
                        .HasColumnType("text")
                        .HasColumnName("usermodification");

                    b.Property<int>("Zoom")
                        .HasColumnType("integer")
                        .HasColumnName("zoom");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("IbgeCode")
                        .IsUnique()
                        .HasDatabaseName("ix_cities_ibgecode");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("Urbiss.Domain.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Creation")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("Modification")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("character varying(40)")
                        .HasColumnName("orderid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint")
                        .HasColumnName("surveyid");

                    b.Property<string>("UserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("usercreation");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<string>("UserModification")
                        .HasColumnType("text")
                        .HasColumnName("usermodification");

                    b.Property<long>("UserSurveyId")
                        .HasColumnType("bigint")
                        .HasColumnName("usersurveyid");

                    b.Property<long?>("VoucherId")
                        .HasColumnType("bigint")
                        .HasColumnName("voucherid");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasDatabaseName("ix_orders_orderid");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("ix_orders_surveyid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_userid");

                    b.HasIndex("UserSurveyId")
                        .HasDatabaseName("ix_orders_usersurveyid");

                    b.HasIndex("VoucherId")
                        .HasDatabaseName("ix_orders_voucherid");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Urbiss.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedname");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Urbiss.Domain.Models.SpatialReferenceSystem", b =>
                {
                    b.Property<int>("Srid")
                        .HasColumnType("integer")
                        .HasColumnName("srid");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("srtext");

                    b.ToTable("spatial_ref_sys", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Urbiss.Domain.Models.Survey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Creation")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("character varying(40)")
                        .HasColumnName("folder");

                    b.Property<Polygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(polygon)")
                        .HasColumnName("geometry");

                    b.Property<DateTime?>("Modification")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification");

                    b.Property<int>("Srid")
                        .HasColumnType("integer")
                        .HasColumnName("srid");

                    b.Property<DateTime>("SurveyDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("surveydate");

                    b.Property<string>("UserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("usercreation");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<string>("UserModification")
                        .HasColumnType("text")
                        .HasColumnName("usermodification");

                    b.HasKey("Id")
                        .HasName("pk_surveys");

                    b.HasIndex("Folder")
                        .IsUnique()
                        .HasDatabaseName("ix_surveys_folder");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_surveys_userid");

                    b.ToTable("surveys");
                });

            modelBuilder.Entity("Urbiss.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("accessfailedcount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("emailconfirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockoutend");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedemail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedusername");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Urbiss.Domain.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_userroles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_userroles_roleid");

                    b.ToTable("userroles");
                });

            modelBuilder.Entity("Urbiss.Domain.Models.UserSurvey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<double>("Area")
                        .HasColumnType("double precision")
                        .HasColumnName("area");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<Polygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(polygon)")
                        .HasColumnName("geometry");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ip");

                    b.Property<DateTime?>("Modification")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification");

                    b.Property<string>("UserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("usercreation");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<string>("UserModification")
                        .HasColumnType("text")
                        .HasColumnName("usermodification");

                    b.HasKey("Id")
                        .HasName("pk_usersurveys");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_usersurveys_userid");

                    b.ToTable("usersurveys");
                });

            modelBuilder.Entity("Urbiss.Domain.Models.Voucher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<double>("Area")
                        .HasColumnType("double precision")
                        .HasColumnName("area");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(15)")
                        .HasColumnName("code");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration");

                    b.Property<DateTime?>("Modification")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasColumnName("status");

                    b.Property<string>("UserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("usercreation");

                    b.Property<string>("UserModification")
                        .HasColumnType("text")
                        .HasColumnName("usermodification");

                    b.HasKey("Id")
                        .HasName("pk_vouchers");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_vouchers_code");

                    b.ToTable("vouchers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Urbiss.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_roleclaims_roles_roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Urbiss.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_userclaims_users_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Urbiss.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_userlogins_users_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Urbiss.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_usertokens_users_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Urbiss.Domain.Models.AerialPhoto", b =>
                {
                    b.HasOne("Urbiss.Domain.Models.Survey", null)
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("fk_aerialphotos_surveys_surveyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Urbiss.Domain.Models.Order", b =>
                {
                    b.HasOne("Urbiss.Domain.Models.Survey", null)
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("fk_orders_surveys_surveyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Urbiss.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_orders_users_userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Urbiss.Domain.Models.UserSurvey", "UserSurvey")
                        .WithMany()
                        .HasForeignKey("UserSurveyId")
                        .HasConstraintName("fk_orders_usersurveys_usersurveyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbiss.Domain.Models.Voucher", null)
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .HasConstraintName("fk_orders_vouchers_voucherid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UserSurvey");
                });

            modelBuilder.Entity("Urbiss.Domain.Models.Survey", b =>
                {
                    b.HasOne("Urbiss.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_surveys_users_userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Urbiss.Domain.Models.UserRole", b =>
                {
                    b.HasOne("Urbiss.Domain.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_userroles_roles_roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbiss.Domain.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_userroles_users_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Urbiss.Domain.Models.UserSurvey", b =>
                {
                    b.HasOne("Urbiss.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_usersurveys_users_userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Urbiss.Domain.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Urbiss.Domain.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
